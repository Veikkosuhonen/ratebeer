name: "CI/CD"
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  test:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:11-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: rails_test
          POSTGRES_USER: rails
          POSTGRES_PASSWORD: password
    env:
      RAILS_ENV: test
      DATABASE_URL: "postgres://rails:password@localhost:5432/rails_test"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # Add or replace dependency steps here
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: 3.1.2
      - name: Run tests
        run: bundle exec rspec

      - uses: actions/upload-artifact@v2
        with:
          name: test-coverage
          path: /home/runner/work/ratebeer/ratebeer/coverage/.resultset.json

  coverage:
    name: Upload coverage report
    runs-on: ubuntu-22.04
    needs: test
    steps:
      - run: mkdir ${{github.workspace}}/coverage
      
      - uses: actions/download-artifact@v2
        with:
          name: test-coverage
          path: ${{github.workspace}}/coverage/
                
      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          debug: true
          

  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: 3.1.2
      - name: RuboCop Linter Action
        uses: andrewmcodes-archive/rubocop-linter-action@v3.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: [test, lint]
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
